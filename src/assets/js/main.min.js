/**
 * Name: Frontend
 * Version: 1.0.0
 * Author: @pabagan
 * Author URI: *
 * License: MIT licensed (2016).
 * License URI: http://www.gnu.org/licenses/gpl-3.0.html.
 * 
 * All files, unless otherwise stated, are released under the GNU General Public
 * License version 3.0 (http://www.gnu.org/licenses/gpl-3.0.html).
 * All HTML/CSS/JAVASCRIPT code is also released under Envato's Regular/Extended License (http://themeforest.net/licenses).
**/

/**
 * Observer pattern subject.
 * 
 * Here is used to deal specially with
 * screen resize and screen sizes change.
 * 
 * Sizes used are (xs,sm,md,lg,xl).
 * 
 * @author @pabagan
 * @credit https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript
 */

'use strict';
/**
 * Create a Observer list 
 * interface.
 */
function List(){
    //console.log('List()');
    this.list = [];
}
 
List.prototype = {
    add: function( obj ){
        return this.list.push( obj );
    },
     
    count: function(){
        return this.list.length;
    },
     
    get: function( index ){
        if( index > -1 && index < this.list.length ){
            return this.list[ index ];
        }
    },
     
    indexOf: function( obj, startIndex ){
        var i = startIndex;
     
        while( i < this.list.length ){
            if( this.list[i] === obj ){
                return i;
            }
            i++;
        }
     
        return -1;
    },

     removeAt: function( index ){
        this.list.splice( index, 1 );
    },
};
/**
 * Observer pattern subject.
 * 
 * Here is used to deal specially with
 * screen resize and screen sizes change.
 * 
 * Sizes used are (xs,sm,md,lg,xl).
 * 
 * @author @pabagan
 * @credit https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript
 */

'use strict';

/**
 * Observer subject to create and 
 * manage observables.
 */
function ObserverSubject(){
    this.observers = new List();
}

ObserverSubject.prototype = {

    addObserver: function( newObserver ){
        //console.log('ObserverSubject.addObserver(newObserver)');
        this.observers.add(newObserver);
    },
    removeObserver: function( newObserver ){
        //console.log('ObserverSubject.removeObserver(newObserver)');
        this.observers.removeAt(this.observers.indexOf(newObserver, 0));
    },
    notify: function( context ){
        //console.log('ObserverSubject.notify(context)');
        var observerCount = this.observers.count();
        for(var i=0; i < observerCount; i++){
            this.observers.get(i).update(context);
        }
    },
    
};

var observerSubject = (function () {
    var instance,
        observers;

    function init(){
        observers = new List();
        
        return {
            addObserver: function( newObserver ){
                //console.log('screenSizeChange.addObserver(newObserver)');
                observers.add(newObserver);
            },
            removeObserver: function( newObserver ){
                //console.log('screenSizeChange.removeObserver(newObserver)');
                observers.removeAt(observers.indexOf(newObserver, 0));
            },
            notify: function( context ){
                //console.log('screenSizeChange.notify(context)');
                var observerCount = observers.count();
                for(var i=0; i < observerCount; i++){
                    observers.get(i).update(context);
                }
            },
            
        };
    }

    return {
        // Get the Singleton instance if one exists
        // or create one if it doesn't
        getInstance: function () {
            if ( !instance ) {
                instance = init();
            }

            return instance;
        }
    };
})();
/**
 * Use waypoint and velocity to trigger
 * display animation when element is 
 * displayed at the viewport.
 * 
 * implements resizeObserver
 *
 * @use Waypoints (http://imakewebthings.com/waypoints/) for detecting element
 * @use Velocity (http://velocityjs.org/) for animations
         
 * @author @pabagan
 * @param 
 * @return void 
 * @credit plugin boilerplate (@ajpiano)
 */

 'use strict';
(function ($) {

    $.gx = $.gx || {};

    var defaults = {
        activateAt: 'lg',
    };    

    $.gx.Animations = function (options) {
        this.settings = $.extend( {}, defaults, options );
        //console.log('$.gx.Animations(element, options)');
        // Add screen class to manage
        this.screen = new $.gx.Screen();
    };

    /**
     * Animations Prototypes.
     */
    $.gx.Animations.prototype = {

        // Inizialize.
        init: function () {
            //console.log('$.gx.Animations.init()');
            var activateAt = this.settings.activateAt;
            
            // Set/unset depending on window
            // size width.
            if(this.settings.activateAt === 'xs' || this.screen.getWidth() > this.screen.getSizeValue(activateAt)) {
                this.setFxs();
            }
        },

        // Set waypoints watch
        // @using: Waypoints.
        // http://imakewebthings.com/waypoints/
        setFxs: function () {
            this.toggleMainNav();
            this.homePresentacion();
            //this.homeBifurca();
            this.entryFeaturedImg();
        },
        
        toggleMainNav: function () {
            var $element = $('#nav-toggle[aria-expanded="false"]');
            //var $element = $('#main-nav-toggle');
            
            $element.on('click', function(){
                $element
                    .velocity({
                        rotateY: "+=180deg",
                        rotateZ: 0,
                    }, {
                        duration: 700,
                        // ...
                    }
                );
            });
        },
        
        homePresentacion: function () {
            // Animate next button
            var $element = $('.anim-bt-1');

            $element
                .velocity({
                    translateY: "20px",
                    translateZ: 0,
                }, {
                    easing: 'sprint',
                    duration: 550,
                    loop: true,
                    // ...
                })
                .on({
                    mouseenter: function () {
                        $(this)
                            .velocity("stop");
                    },
                });
        },

        entryFeaturedImg: function () {
            var $element = $('.post-loop');
            // Use the loop option.
            $element.on({
                mouseenter: function () {
                    $(this).find('.c-curtain').addClass('is_on');
                    $(this).find('.c-img-bg')
                        .velocity({
                            scaleX: 1.1,
                            scaleY: 1.1,
                            //rotateZ: "+2deg",
                        }, {
                            duration: 350,
                            // ...
                        });
                },

                mouseleave: function () {
                    //stuff to do on mouse leave
                    console.log('mouse leave');
                    $(this).find('.c-curtain').removeClass('is_on');
                    $(this).find('.c-img-bg')
                        .velocity("reverse");
                }
            });
        },
    };
}(jQuery));
/**
 * Use waypoint and velocity to trigger
 * display animation when element is 
 * displayed at the viewport.
 * 
 * implements resizeObserver
 *
 * @use Waypoints (http://imakewebthings.com/waypoints/) for detecting element
 * @use Velocity (http://velocityjs.org/) for animations
         
 * @author @pabagan
 * @param 
 * @return void 
 * @credit plugin boilerplate (@ajpiano)
 */

'use strict';
(function ($) {

    $.gx = $.gx || {};

    var defaults = {
        animateChilds: false,
        class: 'is_appear',
        animation: {
            name: 'fadeIn',                 // match velocityUI fx
            duration: 350,                  // animation duration
            delay: 0,                       // animation delay
            stagger: 0,                     // animation time betweed childs appearing
        },
        offset: '50%',                      // % hidded to display
        activateAt: 'lg',                   // if size change need to adjust 
                                            // sass/plugins/animate-appear.
    };    
    $.gx.Appear = function (element, options) {
        this.settings = $.extend( {}, defaults, options );
        //console.log('$.gx.Appear(element, options)');
        this.element = element;
        this.animation = this.settings.animation;
        
        // Add screen class to manage
        // activation/deactivation
        this.screen = new $.gx.Screen();
    };

    /**
     * Appear Prototypes.
     */
    $.gx.Appear.prototype = {

        // Inizialize.
        init: function () {
            //console.log('$.gx.Appear.init()');
            var activateAt = this.settings.activateAt;
            

            // Set/unset depending on window
            // size width.
            if(this.settings.activateAt === 'xs' || this.screen.getWidth() > this.screen.getSizeValue(activateAt)) {
                this.set();
            } else{
                this.unset();
            }

        },

        // Set waypoints watch
        // @using: Waypoints.
        // http://imakewebthings.com/waypoints/
        set: function () {
            //console.log('$.gx.Appear.set()');
            var base = this;

            //Waypoint.enableAll();
            $(this.element).each(function() {
                var e = this;
                $(e).waypoint({
                    handler: function(direction) {
                        //console.log(this.element.id + ' hit' + direction)
                        base.appearCb(this);
                    },
                    offset: base.getOffset(this),
                });
            });
        },

        // appear element animation. This method 
        // includes the logic of the setting 
        // 'settings.animateChilds'.
        // @using: Velocity http://velocityjs.org/
        appearCb: function (elem) {
            //console.log('$.gx.Appear.appearCb(elem)');
            
            var $elem = $(elem.element),
                animationStr = $elem.data('animation'),
                animation = this.getAnimation(animationStr),
                velAnimation;
            
            //
            // animate childs logic
            //
            //console.log(this.settings);
            if(this.settings.animateChilds){
                // set target to childs
                $elem = $elem.children();
            }

            velAnimation = {
                duration: parseInt(animation.duration),
                delay: parseInt(animation.delay),
                stagger: parseInt(animation.stagger),
            };

            // velocity transition
            $elem.velocity('transition.'+ animation.name, velAnimation);
            $elem.addClass(this.settings.class);
            elem.disable();
        },

        getOffset: function (elem) {
            //console.log('$.gx.Appear.getOffset()');
            
            var e = this,
                offset = e.settings.offset,
                ofsetAttr = $(elem).data('offset');

            if(ofsetAttr !== undefined) {
                offset = ofsetAttr;
            }

            //console.log(offset);
            return offset;
        },

        // Set animation object from html data-animate 
        // property. Ordered as animationKeys list 
        // shows.
        // 
        // Order: <data-animation="name duration delay offset">
        // @param string animation
        // @return object animation
        getAnimation: function (animationStr) {
            //console.log('$.gx.Appear.setAnimation()');
            var e = this,
                animation = e.animation;
            
            // Check if element html has defined 
            // data-animation to override defaults.
            if(animationStr !== undefined) {
                //console.log('defined html animation!!');

                var animationKeys = ['name', 'duration', 'delay', 'stagger'],
                    animationLst = $.trim(animationStr).split(' ');

                // Set animation object
                for(var i in animationLst){
                    animation[animationKeys[i]] = animationLst[i];
                }
            }

            return animation;
        },

        // Unset appear
        // 
        // @return void 
        unset: function(){
            //console.log('$.gx.Appear.unset()');
            $(this.element).addClass(this.settings.class);
            Waypoint.disableAll();
        },

        // Update observer method to 
        // trigger waypoints update.
        update: function(){
            //console.log('$.gx.Appear.update()');
            Waypoint.refreshAll();
        }
    };
}(jQuery));
'use strict';
/**!
 * Debounze from Underscores.js but
 * seen at David walsh site
 * 
 * @author @pabagan
 * @see https://davidwalsh.name/javascript-debounce-function 
 * @return void 
 */
function debounce(func, wait, immediate) {
	var timeout;
	return function() {
		var context = this, args = arguments;
		var later = function() {
			timeout = null;
			if (!immediate) func.apply(context, args);
		};
		var callNow = immediate && !timeout;
		clearTimeout(timeout);
		timeout = setTimeout(later, wait);
		if (callNow) func.apply(context, args);
	};
}
/**
 * Fit child elements height
 * 
 * implements resizeObserver
 * 
 * @author @pabagan
 * @param 
 * @return void 
 * @credit plugin boilerplate (@ajpiano)
 */

 'use strict';
(function ($) {

    $.gx = $.gx || {};

    var defaults = {
        activateAt: 'md', 
    }; 

    $.gx.FitChildren = function (selector, options) {
        //console.log('$.gx.FitChildren(element)');
        this.elements = [];
        this.$parents = $(selector);
        this.$children = null;
        this.settings = $.extend( {}, defaults, options );

        this.screen = new $.gx.Screen();
    };

    /**
     * FitChildren Prototypes.
     */
    $.gx.FitChildren.prototype = {
        
        // Inizialize.
        init: function () {
            //console.log('$.gx.FitChildren.init()');
            var activateAt = this.settings.activateAt;
            
            if(this.settings.activateAt === 'xs' || this.screen.getWidth() > this.screen.getSizeValue(activateAt)) {
                this.set();
            } else {
                this.unset();
            }
        },

        set: function () {
            var e = this;
            
            // loop each parent to deals fit 
            // children's height
            $.each(this.$parents, function(i, element) {
                e.setHeight($(this).children());
            });
        },

        unset: function () {
            var e = this;

            // loop each parent to deals fit 
            // children's height
            $.each(this.$parents, function(i, element) {
                e.resetHeights($(this).children());
            });
        },

        // Reset element's height CSS.
        resetHeights: function ($children) {
            //console.log('$.gx.FitChildren.resetHeights()');
            $children.css('height', '');
        },

        // Max children height.
        // @return int maximium children's height (px)
        getMaxHeight: function ($children) {
            //console.log('$.gx.FitChildren.getMaxHeight()');
            var maxHeight = 0;
            
            // loop elemnt with selector
            $.each($children, function() {
                var eHeight = $(this).innerHeight();
                // Set max height
                if( eHeight > maxHeight ) {
                    maxHeight = eHeight;
                }
            });
            
            console.log('altura hijo mayor: ' + maxHeight);
            return maxHeight;
        },

        // Set children's height.
        // @param int height(px)
        // @return void
        setHeight: function ($children) {
            var height;
            
            // apply height reset
            this.resetHeights($children);
            height = this.getMaxHeight($children);
            
            // //console.log('$.gx.FitChildren.setChildrenHeight()');
            $.each($children, function() {
                var $child = $(this);
                
                $child.css({ 'height' : height + 'px' });
                // Apply just to shorter lays fails
                //if ($child.innerHeight() < height ) {}
            });
        },


        // Update used by observer update().
        update : function(){
            //console.log('$.gx.FitChildren.update()');
            this.init();
        },
    };
}(jQuery));
/**
 * Fit child elements height
 * 
 * implements resizeObserver
 * 
 * @author @pabagan
 * @param 
 * @return void 
 * @credit plugin boilerplate (@ajpiano)
 */

 'use strict';
(function ($) {

    $.gx = $.gx || {};

    // screen sizes
    var defaults = { };

    /**
     * Constructor
     */
    $.gx.Forms = function (options) {
        //console.log('$.gx.Forms()');
        this.settings = $.extend( {}, defaults, options );
    };

    /**
     * Prototypes Forms.
     */
    $.gx.Forms.prototype = {
        
        // init
        init: function () {
            //console.log('$.gx.Forms.init()');
            var e = this;

            // 
            // Extend validation methods
            // 
            e.extraValidationMethods();
            
            // just for the demos, avoids form submit
            $.each($('form'), function(index, value){
                var action = $(this).data('act');

                $(this).validate({
                    invalidHandler: function(event, validator) {
                        //console.log('invalid handler');
                        // 'this' refers to the form
                        //var errors = validator.numberOfInvalids();
                    },
                    validHandler: function(event, validator) {
                        //console.log('valid handler');
                        // 'this' refers to the fWorm
                        //var errors = validator.numberOfInvalids();
                    },
                    submitHandler: function(form, event) {
                        event.preventDefault();
                        e.ajaxSubmitWP(form, action);
                    },
                });
                //e.sendController(this, index, value);
            });
        },

        /**
         * Get form values and create  
         * JSON string.
         *
         * @param object field
         * @return JSON object [Name]:[Value]
         */
        getFormValues: function(form) {
            console.log('$.gx.Forms.getFormValues(form)');
            var serializeForm = $(form).not('[type=checkbox]').serialize();
            return serializeForm;
        },

        /**
         * Send form with WP like call
         *
         * @param url server script url
         * @param string type: 'GET', 'POST'
         * @param string action
         * @param string nonce
         */
        ajaxSubmitWP: function(form, action) {
            //console.log('$.gx.Forms.ajaxSubmitWP(form, action)');
            var that = this;

            // Handler for Jquery Ajax
            // http://api.jquery.com/jquery.ajax/
            var request;

            // Abort pendings
            if (request) {
                request.abort();
            }

            // Ajax request
            request = $.ajax({
                type: 'post',
                url: ajax_var.url,
                data:{
                    action : action,
                    content : that.getFormValues(form), // valores del form
                    nonce : ajax_var.nonce
                },
            });

            // Callback done!
            request.done(function (response, textStatus, jqXHR){
                console.log('Hooray, it worked!');
                $(form).trigger('reset');

                $('#form-OK-msg').toggleClass('is_on is_off animate')
                
                var GA_action_value = 12;
                //ga('send','event', 'category', 'action', 'label', value); 
                ga('send', 'event', 'form-generic', 'send', 'form-generic_OK', GA_action_value);
            });

            // Callback fails!
            request.fail(function (jqXHR, textStatus, errorThrown){
                console.log('Oh, it fail!');
                $('#form-KO-msg').toggleClass('is_on is_off animate')

                var GA_action_value = -6;
                ga('send', 'event', 'form-generic', 'send', 'form-generic_KO', GA_action_value);
            });

            // Callback handler that will be called regardless
            // if the request failed or succeeded
            request.always(function () {
                // Reenable the inputs
                // $inputs.prop('disabled', false);
            });
        },

        // 
        // Add jQuery Validation extra 
        // method.
        // https://jqueryvalidation.org/jQuery.validator.addMethod/
        // 
        extraValidationMethods: function(){

            // Check if valid phone or email is provided
            $.validator.addMethod('phoneoremail', function(value, element) {
                if( /[a-z]+@[a-z]+\.[a-z]+/.test( value ) ){
                    return true;
                } else if ( /[0-9]+/.test( value ) ){
                    return true;
                } else{
                    return false;
                }
                //return this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@(?:\S{1,63})$/.test( value );
            }, 'Please enter a valid phone or email address.');
        },
    };

    //$.gx.Forms.defaults = {
    //    opt: 0,
    //};
}(jQuery));
/**
 * Events
 * ga('send','event', 'category', 'action', 'label', value); 
 * 
 * see: https://developers.google.com/analytics/devguides/collection/analyticsjs/events?hl=es
 * 
 * Elements / type / Oblig / Desc
 * 
 * Category     String  Sí  Normalmente, es el objeto con el que se ha interactuado (por ejemplo, un botón).
 * Action   String  Sí  Representa el tipo de interacción (por ejemplo, un clic).
 * Label    String  No  Resulta útil para la clasificación de eventos (por ejemplo, botones de navegación).
 * Value    Number  No  Los valores no deben ser negativos. Resulta útil para pasar recuentos (por ejemplo, cuatro veces).
 * 
 * @credit plugin boilerplate (@ajpiano)
 */

 'use strict';
(function ($) {

    $.gx = $.gx || {};

    // GA sizes
    var defaults = {
    };

    $.gx.GA = function (options) {
        //console.log('$.gx.GA()');
        this.settings = $.extend( {}, defaults, options );  
        this.url = document.location;  
    };   

    /**
     * Prototypes GA.
     */
    $.gx.GA.prototype = {
        
        // Inizialize.
        // @return void
        init: function () {
            console.log('$.gx.GA.init()');
            this.sharePost();
            this.visitSocialNetwork();
            this.form1stClick();
            //this.formSubmit();
        },

        form1stClick: function(){
            // Carga formulario de contacto genérico
            $('#c-contact-form input, #c-contact-form textarea').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'event', 'form-generic', 'load', 'form-1st_click', 3);
            });
        },

        formSubmit: function(){
            // Carga formulario de contacto selección
            // hecho en la logica del submit por AJAX 
            // en Scripts
        },

        sharePost: function(){
            var e = this;

            // linkedin
            $('.entry-share .i-linkedin').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'social', 'LinkedIn', 'share', e.url );
            });

            // twitter
            $('.entry-share .i-twitter').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'social', 'Twitter', 'share', e.url);
            });

            // facebook
            $('.entry-share .i-facebook').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'social', 'Facebook', 'share', e.url);
            });

            // google
            $('.entry-share .i-google').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'social', 'Google+', 'share', e.url);
            });        
        },

        visitSocialNetwork: function(){
            var e = this;
            // linkedin
            $('#page-social-links .i-linkedin').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'social', 'LinkedIn', 'visitar', e.url);
            });

            // twitter
            $('#page-social-links .i-twitter').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'social', 'Twitter', 'visitar', e.url);
            });

            // facebook
            $('#page-social-links .i-facebook').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'social', 'Facebook', 'visitar', e.url);
            });

            // google
            $('#page-social-links .i-google').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'social', 'Google+', 'visitar', e.url);
            });
            
            // RSS
            $('#page-social-links .i-rss').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'social', 'RSS', 'visitar', e.url);
            });
            
            // Twitter Widget (Blog single + page)
            $('#page-social-links  .twitter_widget a').on('click', function(event){
                console.log('Event triggered!!');
                ga('send', 'social', 'Twitter', 'visitar', e.url);
            });
        },
    };

    //$.gx.GA.defaults = {
    //    opt: 0,
    //};
}(jQuery));
'use strict';

/**
 * Class to implement a interface for Masonry 
 * layouts.
 *
 * @uses http://masonry.desandro.com/
 * @uses https://github.com/desandro/imagesloaded
 * 
 * @author @pabagan
 * @return void 
 */
(function ($) {
    
    $.gx = $.gx || {};

    var defaults = {
        activateAt: 'sm',
        masonryContent: '.c-masonry',
        masonryItem: '.c-masonry-item',
    };
    
    $.gx.Masonry = function (selector, options) {
        //console.log('$.gx.Masonry(options)');
        this.selector = selector;
        this.settings = $.extend( {}, defaults, options );
        this.masonry = null;
        
        // Add screen class to manage 
        // fx activation.
        this.screen = new $.gx.Screen();
    };

    /**
     * Masonry Prototypes.
     */
    $.gx.Masonry.prototype = {
        // Activates parallax JS/CSS
        // depending on activateAt setting.
        init: function () {
            //console.log('$.gx.Masonry.init()');
            if($(this.selector).length > 0){
                // get size for activation
                var activateAt = this.settings.activateAt;

                // screen size activation logic
                if(this.settings.activateAt === 'xs' || this.screen.getWidth() > this.screen.getSizeValue(activateAt)) {
                    this.set();
                } else {
                    this.unset();
                }
            }
        },

        // Set masonry fx with imagesLoaded.
        // https://github.com/desandro/imagesloaded
        set: function () {
            //console.log('$.gx.Masonry.set()');
            var that = this;
            
            new imagesLoaded( that.selector, function(){
                that.masonry = new Masonry( that.selector, {
                    itemSelector: that.settings.masonryItem.toString(),
                });
            });
        },

        // Unset masonry.
        unset: function () {
            //console.log('$.gx.Masonry.unset()');
            if(this.masonry !== null){
              this.masonry.destroy();
            }
        },

        // Update method for observer 
        // pattern.
        update: function(){
            //console.log('$.gx.Masonry.update()');
            this.init();
        },
    };

    // This works as class variables
    //$.gx.Masonry.toggleModel = {
    //    opt: 0,
    //};
}(jQuery));

/**
 * Fit child elements height
 * 
 * implements resizeObserver
 * 
 * @author @pabagan
 * @param 
 * @return void 
 * @credit plugin boilerplate (@ajpiano)
 */

 'use strict';
(function ($) {

    $.gx = $.gx || {};

    // screen sizes
    var defaults = {
        // width in px
        'screenSizes': {
            xs  : 480,
            sm  : 639,
            md  : 940,
            lg  : 1200,
            xl  : 1599,
            xxl : 1900,
        },
    };

    $.gx.Screen = function (options) {
        //console.log('$.gx.Screen()');
        this.settings = $.extend( {}, defaults, options );
        this.size = null;
        this.width = null;
    };
    

    /**
     * Prototypes Screen.
     */
    $.gx.Screen.prototype = {
        
        // init
        init: function () {
            //console.log('$.gx.Screen.init()');
            this.size = this.getSize();
            this.width = this.getWidth();
            this.height = this.getHeight();
            //console.log('size: ' + this.size);
        	//console.log('width: ' + this.width);
        },

        // Get window width.
        // 
        // @return integer
        getWidth: function(){
            return $(window).width();
        }, 

        // Get window height.
        // 
        // @return integer
        getHeight: function(){
            return $(window).height();
        }, 

        // Get text size
        // 
        // @return integer
        getSizeValue: function(size){
            return this.settings.screenSizes[size];
        },

        // Get text size
        // 
        // @return string
        getSize: function(){
            var size = 'xs',
                screenSizes = this.settings.screenSizes,
                width = this.getWidth();

            if( width > screenSizes.xxl){
                size = 'xxl';
            } else if(width > screenSizes.xl){
                size = 'xl';
            } else if (width > screenSizes.lg){
                size = 'lg';
            } else if (width > screenSizes.md){
                size = 'md';
            } else if (width > screenSizes.sm){
                size = 'sm';
            }

            return size;
        },

        // Update used by observer update().
        // 
        // @return void
        update : function(){
            //console.log('$.gx.Screen.update()');
            this.init();
        },
    };

    //$.gx.Screen.defaults = {
    //    opt: 0,
    //};
}(jQuery));
'use strict';

/**
 * Class to implement a interface for ScrollTo 
 * functionallity
 * 
 * @uses http://velocityjs.org/
 * 
 * @author @pabagan
 * @return void 
 */
(function ($) {
    
    $.gx = $.gx || {};

    var defaults = {
    };
    
    $.gx.ScrollTo = function (selector, options) {
        //console.log('$.gx.ScrollTo(options)');
        this.selector = selector;
        this.settings = $.extend( {}, defaults, options );
        
        // when fixed header e.g.
        this.offset = -$('.site-branding').height(); // px height
    };

    /**
     * ScrollTo Prototypes.
     */
    $.gx.ScrollTo.prototype = {
        init: function () {
            //console.log('$.gx.ScrollTo.init()');
            if($(this.selector).length > 0){
                this.click();
            }
        },

        // Click event
        click: function () {
            var that = this;
            //console.log('$.gx.ScrollTo.click()');
            $(this.selector).on('click', function(e){
                e.preventDefault();
                
                var targetSelector = $(this).data('scroll-to');

                that.scrollBodyTo(targetSelector);
            });
        },

        // Scroll body to a target lay
        scrollBodyTo: function (targetSelector) {
            //console.log('$.gx.ScrollTo.scroll()');
            //console.log($('.site-branding').height());
            //console.log(targetSelector);
            $(targetSelector).velocity('scroll', { 
                duration: 500, 
                //easing: 'spring',
                //easing: 'swing',
                //easing: 'easeInSine',
                easing: 'easeOutSine',
                offset: this.offset,
            });
        },
    };

    // This works as class variables
    //$.gx.ScrollTo.toggleModel = {
    //    opt: 0,
    //};
}(jQuery));

/**
 * Sliders using OwlCarousel 2
 *
 * @see  https://owlcarousel2.github.io/OwlCarousel2/demos/responsive.html
 * 
 * @credit plugin boilerplate (@ajpiano)
 */

 'use strict';
(function ($) {

    $.gx = $.gx || {};

    // Sliders sizes
    var defaults = {
        // Most important owl features
        //items : 1,
        //itemsCustom : false,
        //itemsDesktop : [1199,4],
        //itemsDesktopSmall : [980,3],
        //itemsTablet: [768,2],
        //itemsTabletSmall: false,
        //itemsMobile : [479,1],
        //singleItem : true,
        //itemsScaleUp : false,
     
        //Basic Speeds
        //slideSpeed : 200,
        //paginationSpeed : 800,
        //rewindSpeed : 1000,
     
        //Autoplay
        //autoPlay : true,
        //stopOnHover : false,
     
        // Navigation
        //navigation : false,
        //navigationText : ["prev","next"],
        //rewindNav : true,
        //scrollPerPage : false,
     
        //Pagination
        //pagination : true,
        //paginationNumbers: false,
     
        // Responsive 
        //responsive: true,
        //responsiveRefreshRate : 200,
        //responsiveBaseWidth: window,
     
        // CSS Styles
        //baseClass : "owl-carousel",
        //theme : "owl-theme",
     
        //Lazy load
        //lazyLoad : false,
        //lazyFollow : true,
        //lazyEffect : "fade",
     
        //Auto height
        //autoHeight : false,
     
        //JSON 
        //jsonPath : false, 
        //jsonSuccess : false,
     
        //Mouse Events
        //dragBeforeAnimFinish : true,
        //mouseDrag : true,
        //touchDrag : true,
     
        //Transitions
        //transitionStyle : false,
     
        // Other
        //addClassActive : true,
     
        //Callbacks
        //beforeUpdate : false,
        //afterUpdate : false,
        //beforeInit: false, 
        //afterInit: false, 
        //beforeMove: false, 
        //afterMove: false,
        //afterAction: false,
        //startDragging : false,
        //afterLazyLoad : false,
    };

    $.gx.Sliders = function (selector, options) {
        //console.log('$.gx.Sliders()');
        this.selector = selector;
        this.settings = $.extend( {}, defaults, options );  
    };
    

    /**
     * Prototypes Sliders.
     */
    $.gx.Sliders.prototype = {
        
        // Inizialize.
        // @return void
        init: function () {
            //console.log('$.gx.Sliders.init()');
            $(this.selector).owlCarousel(this.settings);
        },

        // Update used by observer update().
        // @return void
        update : function(){
            //console.log('$.gx.Sliders.update()');
            this.init();
        },
    };

    //$.gx.Sliders.defaults = {
    //    opt: 0,
    //};
}(jQuery));
'use strict';
/**
 * An element toggle VelocityUI classes 
 * to show on/off element.
 *
 * The toggler self toggle the classe 
 * is_toggled. The target show in/out 
 * activating velocityUI animations.
 * 
 * see: http://velocityjs.org/
 * 
 * @author @pabagan
 * @return void 
 */
(function ($) {
    
    $.gx = $.gx || {};
    $.gx.Toggle = $.gx.Toggle || {};

    var defaults = {
        onClass: 'is_on',       // class to toggle
        offClass: 'is_off',         // class to toggle
    };
    
    $.gx.Toggle.classes = function (selector, options) {
        //console.log('$.gx.Toggle.classes(selector, options)');
        this.selector = selector;
        this.opened = [];
        this.settings = $.extend( {}, defaults, options );
        //var closeOnClickDocument = new ObserverSubject();
        //closeOnClickDocument.addObserver(appear);
        //windowResize.notify();
    };


    /**
     * VelocityToggler Prototypes.
     */
    $.gx.Toggle.classes.prototype = {
        // init
        init: function () {
            //console.log('$.gx.Toggle.classes.init()');
            var that = this;

            // click on toggle bt gets button #id
            // and toggle
            $(that.selector).on('click', function(){
                //console.log('$.gx.Toggle.classes click()');              
                that.toggle(this);
            });

            // TODO:
            // Outern click triggers close
            //$(document).on('click', function (e) {
                //that.closeOpened(e);
            //});

        },

        // toggle
        toggle: function(element){
            //console.log('$.gx.Toggle.classes.toggle()');
                        
            var that = this,
                $element = $(element),
                $target = this.getTarget($element),
                state = this.getState($element),
                fxDuration = 100;

            // Toggler class timeout
            setTimeout(function(){
                // Add/pop to opened
                if(state === 'false'){
                    that.opened.push(element);
                } else {
                    var index = that.opened.indexOf(element);
                    if (index > -1) {
                        that.opened.splice(index, 1);
                    }
                }

                // toggle state value and set 
                // new state.
                state = (state == 'false') ? 'true': 'false';
                that.setState($element, state);
                // add animate class to active animations 
                // and toggle classes to target.
                $target.addClass('animate');
                $target.toggleClass(that.settings.onClass + ' ' + that.settings.offClass);
                

            }, fxDuration);
        },

        // return element state from
        getState: function($element){
            return $element.attr('aria-expanded');
        },
        
        // 
        setState: function($element, state){
            $element.attr('aria-expanded', state);
        }, 

        // get target
        // @return jQuery target object
        getTarget: function($element){
            var targetId = $element.attr('aria-controls');
            
            return $('#' + targetId);
        },
        // TODO:
        closeOpened: function(e){
            console.log('');
            console.log(this.opened);

            for (var i = 0; i < this.opened.length; i++) {
                var element = this.opened[i];
                var $element = $(this.opened[i]);
                console.log(element.id);
                //console.log($element);
                console.log('target', e.target);
                console.log('element is e.target', $("#nav-toggle c-icon-sm").is(e.target));
                if (!$element.is(e.target) && !$element.is("#nav-toggle c-icon-sm") ) {
                    console.log('cerrandooooooooooooooooooooooooooooooooooooo');
                    //if (!$element.is(e.target) && !$target.is(e.target) && $target.has(e.target).length === 0) {
                    this.toggle(this.opened[i]);
                }
            }
        },
    };

    // This works as class variables
    //$.gx.Toggle.classes.toggleModel = {
    //    opt: 0,
    //};

}(jQuery));

'use strict';
/**
 * An element toggle VelocityUI classes 
 * to show on/off element.
 *
 * The toggler self toggle the classe 
 * is_toggled. The target show in/out 
 * activating velocityUI animations.
 * 
 * see: http://velocityjs.org/
 * 
 * @author @pabagan
 * @return void 
 */
(function ($) {
    
    $.gx = $.gx || {};
    $.gx.Toggle = $.gx.Toggle || {};

    var defaults = {
        animateDuration: 250,
        animateDelay: 0,
        animateIn: 'slideLeftBigIn',
        animateOut: 'slideLeftBigOut',
    };
    
    $.gx.Toggle.velocityUI = function (selector, options) {
        //console.log('$.gx.Toggle.velocityUI(selector, options)');
        this.selector = selector;
        this.settings = $.extend( {}, defaults, options );

    };



    /**
     * VelocityToggler Prototypes.
     */
    $.gx.Toggle.velocityUI.prototype = {
        // init
        init: function () {
            //console.log('$.gx.Toggle.velocityUI.init()');
            var that = this;

            $(that.selector).on('click', function(){
                //console.log('$.gx.Toggle.velocityUI click()');              
                that.toggle(this);
            });
        },

        // toggle
        toggle: function(element){
            //console.log('$.gx.Toggle.velocityUI.toggle()');
            
            var that = this,
                $element = $(element),
                target = $element.attr('aria-controls'),
                $target = $('#' + target),
                state,
                animation,
                fxDuration = that.settings.animateDuration;
          
            // Toggler class timeout
            setTimeout(function(){
                clearTimeout(fxDuration);

                state = $element.attr('aria-expanded');
                animation = that.getAnimation(state);

                // DEBUG:
                //console.log('---------------------------------------');
                //console.log('Timeout pre states');
                //console.log('---------------------------------------');
                //console.log('State: ' + state);
                //console.log('Target: ' + target);
                //console.log('fxDuration: ' + fxDuration);
                //console.log('Animation: ' + animation);

                // animate
                that.animate($target, animation);
                // state toggle
                that.stateToggle($element, $target, state);                
            }, fxDuration);
        },

        // Toggle elemento aria-expanded attr. The 
        //state manages velocity animate in/out.
        //
        // @param jQuery object $element 
        // @param boolean state
        stateToggle: function($element, $target, state){
            //console.log('$.gx.Toggle.velocityUI.stateToggle($element, state)');
            // toggle classes to elements
            $element.toggleClass('is_hide is_show');
            $target.toggleClass('is_hide is_show');
            
            // toggle state value
            state = (state == 'false') ? 'true': 'false';
            
            // ... and change value at html
            $element.attr('aria-expanded', state);            
        },

        // Get animation depending on passed
        // state.
        // 
        // @param boolean state
        // @return string animation
        getAnimation: function(state){
            //console.log('$.gx.Toggle.velocityUI.getAnimation(state)');
            var animation = '';
            
            if (state === 'false'){
                animation = this.settings.animateIn;
            } else {
                animation = this.settings.animateOut;
            }

            //console.log(animation);
            return animation;
        },

        // Velocity animation.
        // @param jQueryObj $target 
        // @param string animation name
        animate: function($target, animation){
            //console.log('$.gx.Toggle.velocityUI.animate($target, animation)');
            var that = this;

            // velocity transition
            $target.velocity('transition.'+ animation, {     
                duration: that.settings.animateDuration,
                delay: that.settings.animateDelay,
            });
        },
    };

    // This works as class variables
    //$.gx.Toggle.velocityUI.toggleModel = {
    //    opt: 0,
    //};

}(jQuery));

'use strict';

/**!
 * UI Main program
 * 
 * @author @pabagan
 * @return void 
 */
jQuery(document).ready(function ($) {
    
    // Plugins Settings
    var settings = {
        'sliderA': {
            //navigation : true, // Show next and prev buttons
            items : true,
            autoHeight : true,
            loop : true,
            slideSpeed : 300,
            //Autoplay
            //autoplay : true,
            autoplay: true,
            autoplayHoverPause: true,
            singleItem:true,
        },
        'velocityToggler': {
            animateIn: 'slideRightIn',
            animateOut: 'slideRightOut',
            animateDuration: 350,
            animateDelay: 0,
        },
        'animations': {
            activateAt: 'lg', // cambiar a lg
        },

        'appear': {
            activateAt: 'lg', // cambiar a lg
        },
        'appearChilds': {
            animateChilds: true,
            activateAt: 'lg', // cambiar a lg
        },
        'masonry': {
            activateAt: 'md',
        },
        'fitChildren': {
            activateAt: 'sm',
        },

        'fitChildrenMd': {
            activateAt: 'md',
        },
        'forms': {
            'clientSideValidation': true,
        },

        // buggy
        //'parallaxBG': { activateAt: 'lg',},
    };

    // instances
    var windowResize = new ObserverSubject();
    var animations = new $.gx.Animations(settings.animations);
    var appear = new $.gx.Appear('[data-appear]', settings.appear);
    var forms = new $.gx.Forms(settings.forms);
    var appearChilds = new $.gx.Appear('[data-appear-children]', settings.appearChilds);
    var classToggler = new $.gx.Toggle.classes('[data-toggle-classes]');
    var fitChildren = new $.gx.FitChildren('[data-fit-children]', settings.fitChildren);
    var fitChildrenMd = new $.gx.FitChildren('[data-fit-children-md]', settings.fitChildrenMd);
    var masonry = new $.gx.Masonry('.c-masonry', settings.masonry);
    var scrollTo = new $.gx.ScrollTo('[data-scroll-to]');
    var screen = new $.gx.Screen();
    var googleAnalytics = new $.gx.GA();

    var sliderA = new $.gx.Sliders('.owl-carousel', settings.sliderA);
    var velocityToggler = new $.gx.Toggle.velocityUI('[data-toggle-velocity]', settings.velocityTogglerOptions);
    

    // Superfish
    $('.menu, .nav, .c-nav-bar, .c-nav-col').superfish({
        animation: { height:'show' },
        animationOut: { height:'hide' },
        delay:       1200,
        pathClass:  'current',
    });


    // 
    // 
    // Window load loads.
    // 
    // 
    $(window).bind('load', function() {
        // inits
        classToggler.init();        // class toggler
        velocityToggler.init();     // Velocity toggler fx
        scrollTo.init();            // Velocity scrollTo
        fitChildren.init();         // note fit chindren before appear
        fitChildrenMd.init();       // note fit chindren before appear
        animations.init();          // appear
        forms.init();               // forms validation
        appear.init();              // appear
        appearChilds.init();        // appear childs
        sliderA.init();             // Slider A type
        //parallaxBG.init();        // Parallax BG
        googleAnalytics.init();
        // 
        // Masonry. Needs to work here to 
        // perform with JS appened html. 
        // Otherwise we get error.
        masonry.init();
    }); // end of window load


    // Elements which reloads on 
    // on window resize.
    windowResize.addObserver(appear);
    windowResize.addObserver(appearChilds);
    //windowResize.addObserver(parallaxBG);
    windowResize.addObserver(fitChildren);
    windowResize.addObserver(fitChildrenMd);
    windowResize.addObserver(masonry);
    windowResize.addObserver(screen);

    // Elements which deactivate/activate
    // at certain window size (xs, sm, ..).
    //windowSizeResize.addObserver();

    // 
    // screen resize event notify 
    // observers.
    // 
    var windowResizeFn = debounce(function() {
        // Notify resize observers
        windowResize.notify();
    }, 300);

    window.addEventListener('resize', windowResizeFn);   

    // 
    // Detect if tel link not supported
    // to avoid links.
    // 
    var is_phone = (
        (/iphone|android|ie|blackberry|fennec/).test(navigator.userAgent.toLowerCase()) && 
        'ontouchstart' in document.documentElement
    );

    $('a[href*="tel:"]').on('click', function(e){
        if(!is_phone){
            e.preventDefault();
        }
    });
    
    // 
    // Close parent lay
    // 
    $('[data-close-parent]').on('click', function(){
        $(this).parent().addClass('animate').toggleClass('is_on is_off');
    });
});

var map;

function initMap() {

  var mapTitle  = 'Farmacia Lasarte';
  var mapLay    = 'map';

  var latLong   =  {lat: 37.87944, lng: -4.788028};
  var mapOptions = {
    zoom: 14,
    center: latLong,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    //disableDefaultUI: true,
    mapTypeControl: false,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    disableDefaultUI: true,
    overviewMapControl: false,
    streetViewControl: false,
    navigationControl: false,
    //draggable: false,
    scrollwheel: false,
    disableDoubleClickZoom: true,
    zoomControl: true,
    /*
    */
  };

  map = new google.maps.Map(document.getElementById(mapLay), mapOptions);

  /*
   * Add Custom Market.
   */
  var marker = new google.maps.Marker({
      position: latLong,
      map: map,
      title: mapTitle,
      icon: 'http://farmacialasarte.com/assets/img/location.png'
  });
}

/*

google.maps.event.addDomListener(window, 'load', initialize);

// Posicionar respecto del centro al cambiar el tamaño de la pantalla.
google.maps.event.addDomListener(window, "resize", function() {
  var center = map.getCenter();
  google.maps.event.trigger(map, "resize");
  map.setCenter(center); 
});
 */